import { PayloadAction, createSlice } from '@reduxjs/toolkit';
<% if (type === 'next-app') { %>import { CookieService } from '<%= libPath %>/shared/data-access/cookie';<% } %>

export interface AuthState {
  isAuthenticated: boolean | null;
  isAppReady: boolean;
  <% if (type === 'next-app') { %>expiryDate: Date | null;<% } %>
}

const initialState: AuthState = {
  isAuthenticated: <% if (type === 'next-app') { %>CookieService.get('isAuthenticated') === 'true',<% } else { %>null,<% } %>
  isAppReady: false,
  <% if (type === 'next-app') { %>expiryDate: new Date(CookieService.get('tokenExpiryDate')),<% } %>
};

const authSlice = createSlice({
  name: 'authState',
  initialState,
  reducers: {
    setIsAuthenticated(state, { payload }: PayloadAction<boolean>) {
      state.isAuthenticated = payload;
    },
    setIsAppReady(state, { payload }: PayloadAction<boolean>) {
      state.isAppReady = payload;
    },
    <% if (type === 'next-app') { %>setExpiryDate(state, { payload }: PayloadAction<AuthState['expiryDate']>) {
      state.expiryDate = payload;
    },<% } %>
    unauthorize(state) {
      state.isAuthenticated = false;
      <% if (type === 'next-app') { %>state.expiryDate = null;<% } %>
    },
  },
  selectors: {
    isAuthenticated: (state) => state.isAuthenticated,
    isAppReady: (state) => state.isAppReady,
    <% if (type === 'next-app') { %>expiryDate: (state) => state.expiryDate,<% } %>
  },
});

export const authReducer = authSlice.reducer;
export const authReducerPath = authSlice.name;
export const authSelectors = authSlice.selectors;
export const authActions = authSlice.actions;
