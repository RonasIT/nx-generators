<% if(isStoreEnabled) { %> import { store } from '<%= libPath %>/shared/data-access/store';<% } %>
import { setLanguage } from '@ronas-it/react-native-common-modules';
<% if(isUIKittenEnabled) { %>
import { UserThemeProvider } from '<%= libPath %>/shared/features/user-theme-provider';
<% } %>
<% if(isStoreEnabled) { %>import { storeActions } from '@ronas-it/rtkq-entity-api';<% } %>
import { Stack } from 'expo-router';
import { ReactElement<% if(isStoreEnabled) { %>, useEffect<% } %> } from 'react';
<% if(isStoreEnabled) { %>import { Provider, useDispatch } from 'react-redux';<% } %>

export { ErrorBoundary } from 'expo-router';

const translations = {
  en: {
    ...require('i18n/<%= appDirectory %>/app/en.json'),
    ...require('i18n/<%= appDirectory %>/shared/en.json')
  }
};

const useLanguage = setLanguage(translations, 'en');

// eslint-disable-next-line @typescript-eslint/naming-convention
export const unstable_settings = {
  initialRouteName: 'index',
};

function App(): ReactElement {
  <% if(isStoreEnabled) { %>
  const dispatch = useDispatch();
  useLanguage('en');

  useEffect(() => {
    dispatch(storeActions.init());
  }, []);
  <% } %>
  return (
    <Stack>
      <Stack.Screen name='index' />
    </Stack>
  );
}

export default function RootLayout(): ReactElement | null {
  return (
    <% if(isStoreEnabled) { %><Provider store={store}><% } %>
    <% if(isUIKittenEnabled) { %><UserThemeProvider><% } %>
      <App />
    <% if(isUIKittenEnabled) { %></UserThemeProvider><% } %>
    <% if(isStoreEnabled) { %></Provider><% } %>
  );
}
