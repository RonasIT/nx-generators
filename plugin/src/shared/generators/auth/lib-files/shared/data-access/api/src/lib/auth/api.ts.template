import { prepareRequestParams } from '@ronas-it/rtkq-entity-api';
import { plainToInstance } from 'class-transformer';
import { createAppApi } from '<%= formatDirectory() %>/shared/data-access/api-client';
import {
  ForgotPasswordRequest,
  LoginRequest,
  LogInResponse,
  RefreshTokenResponse,
  RegisterRequest,
  RestorePasswordRequest,
} from './models';

export const authApi = createAppApi({
  reducerPath: 'auth',
  endpoints: (builder) => ({
    login: builder.mutation<LogInResponse, LoginRequest>({
      query: (params) => {
        const request = prepareRequestParams(params, LoginRequest);

        return {
          method: 'POST',
          url: '/login',
          data: request,
        };
      },
      transformResponse: (response) => plainToInstance(LogInResponse, response),
      transformErrorResponse: (response) => ({ ...response, skipToast: true }),
    }),
    register: builder.mutation<LogInResponse, RegisterRequest>({
      query: (params) => {
        const request = prepareRequestParams(params, RegisterRequest);

        return {
          method: 'POST',
          url: '/register',
          data: request,
        };
      },
      transformResponse: (response) => plainToInstance(LogInResponse, response),
      transformErrorResponse: (response) => ({ ...response, skipToast: true }),
    }),
    refreshToken: builder.mutation<RefreshTokenResponse, void>({
      query: () => ({
        method: 'GET',
        url: '/auth/refresh',
      }),
    }),
    forgotPassword: builder.mutation<void, ForgotPasswordRequest>({
      query: (params) => {
        const request = prepareRequestParams(params, ForgotPasswordRequest);

        return {
          method: 'POST',
          url: '/auth/forgot-password',
          data: request,
        };
      },
      transformErrorResponse: (response) => ({ ...response, skipToast: true }),
    }),
    restorePassword: builder.mutation<void, RestorePasswordRequest>({
      query: (params) => {
        const request = prepareRequestParams(params, RestorePasswordRequest);

        return {
          method: 'POST',
          url: '/auth/restore-password',
          params: request,
        };
      },
    }),
    logout: builder.mutation<void, void>({
      query: () => ({
        method: 'POST',
        url: '/auth/logout',
      }),
    }),
  }),
});
